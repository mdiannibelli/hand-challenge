const MIN_VALUE = 0
const MAX_VALUE = 255

const clamp = (value) => {
  if (value > MAX_VALUE) return MIN_VALUE
  if (value < MIN_VALUE) return MAX_VALUE
  return value
}

const getNextFistIndex = (index, instruction) => {
  let fist = 1
  // index => fist
  // index + 1 => next emote
  for (let i = index + 1; i < instruction.length; i++) {
    if (instruction[i] === 'ðŸ¤œ') fist++
    if (instruction[i] === 'ðŸ¤›') fist--
    if (fist === 0) return i
  }
}

const getPreviousFistIndex = (index, instruction) => {
  let fist = 1
  for (let i = index - 1; i >= 0; i--) {
    if (instruction[i] === 'ðŸ¤›') fist++
    if (instruction[i] === 'ðŸ¤œ') fist--
    if (fist === 0) return i
  }
}

function translate (string) {
  const memory = [0]

  let pointer = 0 // memory pointer => pointer of the array
  let index = 0
  let output = ''

  const arrayInstructions = Array.from(string) // Emotes array

  const steps = {
    'ðŸ‘‰': () => {
      pointer++
      memory[pointer] ??= 0 // memory is initialized to 0
    },
    'ðŸ‘ˆ': () => {
      pointer--
      memory[pointer] ??= 0
    },
    'ðŸ‘†': () => {
      memory[pointer] = clamp(memory[pointer] + 1)
    },
    'ðŸ‘‡': () => {
      memory[pointer] = clamp(memory[pointer] - 1)
    },
    'ðŸ¤œ': () => {
      if (memory[pointer] === 0) {
        index = getNextFistIndex(index, arrayInstructions)
      }
    },
    'ðŸ¤›': () => {
      if (memory[pointer] !== 0) {
        index = getPreviousFistIndex(index, arrayInstructions)
      }
    },
    'ðŸ‘Š': () => {
      output += String.fromCharCode(memory[pointer]) // Create chain
    }
  }

  while (index < string.length) {
    const emoji = arrayInstructions[index]
    steps[emoji]() // execute step in emoji position
    console.log({ emoji, index, output })
    index++
  }

  return output
}

/* console.log(
  translate('ðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘Š')
)

console.log(
  translate('ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‡ðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘†ðŸ‘‰ðŸ‘‡ðŸ¤œðŸ‘†ðŸ¤›ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘†ðŸ‘‰ðŸ‘†ðŸ¤›ðŸ‘‰ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘Š')
) */

module.exports = translate
